import type { EventHandler, Events } from '../../event-emitter';
export declare const useNovuEvent: <E extends ("session.initialize.pending" | "session.initialize.resolved") | ("notifications.list.pending" | "notifications.list.resolved") | ("notifications.count.pending" | "notifications.count.resolved") | ("preferences.list.pending" | "preferences.list.resolved") | ("preferences.update.pending" | "preferences.update.resolved") | ("socket.connect.pending" | "socket.connect.resolved") | "notifications.notification_received" | "notifications.unseen_count_changed" | "notifications.unread_count_changed" | ("notification.read.pending" | "notification.read.resolved") | ("notification.unread.pending" | "notification.unread.resolved") | ("notification.archive.pending" | "notification.archive.resolved") | ("notification.unarchive.pending" | "notification.unarchive.resolved") | ("notification.complete_action.pending" | "notification.complete_action.resolved") | ("notification.revert_action.pending" | "notification.revert_action.resolved") | ("notifications.read_all.pending" | "notifications.read_all.resolved") | ("notifications.archive_all.pending" | "notifications.archive_all.resolved") | ("notifications.archive_all_read.pending" | "notifications.archive_all_read.resolved") | "notifications.list.updated">({ event, eventHandler, }: {
    event: E;
    eventHandler: EventHandler<Events[E]>;
}) => void;
//# sourceMappingURL=useNovuEvent.d.ts.map